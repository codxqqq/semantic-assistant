import pandas as pd
import requests
import re
from io import BytesIO
from sentence_transformers import SentenceTransformer, util
import pymorphy2
import functools

try:
    import streamlit as st
    cache_decorator = st.cache_data
except ImportError:
    cache_decorator = lambda func: func  # –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å Streamlit

# ‚ö° –õ–µ–Ω–∏–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
@functools.lru_cache(maxsize=1)
def get_model():
    return SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')

# ‚ö° –õ–µ–Ω–∏–≤—ã–π –ª–µ–º–º–∞—Ç–∏–∑–∞—Ç–æ—Ä
@functools.lru_cache(maxsize=1)
def get_morph():
    return pymorphy2.MorphAnalyzer()

# –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏
def preprocess(text):
    text = str(text).lower().strip()
    text = re.sub(r"\s+", " ", text)
    return text

# –õ–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è
def lemmatize(word):
    return get_morph().parse(word)[0].normal_form

# ‚úÖ –ö—ç—à–∏—Ä—É–µ–º–∞—è –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è
@functools.lru_cache(maxsize=10000)
def lemmatize_cached(word):
    return lemmatize(word)

# ‚úÖ –ü—Ä–µ–¥—Å–æ–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —Å–∏–Ω–æ–Ω–∏–º–æ–≤
SYNONYM_DICT = {
    '—Å–∏–º': {'—Å–∏–º', '—Å–∏–º–∫–∞', '—Å–∏–º–∫–∞—Ä—Ç–∞'},
    '–∫—Ä–µ–¥–∏—Ç–∫–∞': {'–∫—Ä–µ–¥–∏—Ç–∫–∞', '–∫–∞—Ä—Ç–∞'},
    '–Ω–∞–ª–∏—á–Ω—ã–µ': {'–Ω–∞–ª–∏—á–Ω—ã–µ', '–Ω–∞–ª–∏—á–∫–∞'}
}

# –°—Å—ã–ª–∫–∏ –Ω–∞ CSV-—Ñ–∞–π–ª—ã
GITHUB_CSV_URLS = [
    "https://raw.githubusercontent.com/skatzrsk/semantic-assistant/main/data1.csv",
    "https://raw.githubusercontent.com/skatzrsk/semantic-assistant/main/data2.csv",
    "https://raw.githubusercontent.com/skatzrsk/semantic-assistant/main/data3.csv"
]

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ñ—Ä–∞–∑ –ø–æ /
def split_by_slash(phrase):
    parts = [p.strip() for p in str(phrase).split("/") if p.strip()]
    return parts if parts else [phrase]

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ CSV-—Ñ–∞–π–ª–∞
def load_csv(url):
    response = requests.get(url)
    if response.status_code != 200:
        raise ValueError(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {url}")
    df = pd.read_csv(BytesIO(response.content), encoding='utf-8')

    topic_cols = [col for col in df.columns if col.lower().startswith("topics")]
    if not topic_cols:
        raise KeyError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ topics")

    df['topics'] = df[topic_cols].astype(str).agg(lambda x: [v for v in x if v and v != 'nan'], axis=1)
    df['phrase_full'] = df['phrase']
    df['phrase_list'] = df['phrase'].apply(split_by_slash)
    df = df.explode('phrase_list', ignore_index=True)
    df['phrase'] = df['phrase_list']
    df['phrase_proc'] = df['phrase'].apply(preprocess)

    # ‚úÖ –ü—Ä–µ–¥–≤—ã—á–∏—Å–ª—è–µ–º –ª–µ–º–º—ã —Ñ—Ä–∞–∑—ã –æ–¥–∏–Ω —Ä–∞–∑
    df['phrase_lemmas'] = df['phrase_proc'].apply(
        lambda text: {lemmatize_cached(w) for w in re.findall(r"\w+", text)}
    )

    return df[['phrase', 'phrase_proc', 'phrase_full', 'phrase_lemmas', 'topics']]

# ‚úÖ –ö—ç—à–∏—Ä—É–µ–º–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö CSV-—Ñ–∞–π–ª–æ–≤
@cache_decorator
def load_all_excels():
    dfs = []
    for url in GITHUB_CSV_URLS:
        try:
            dfs.append(load_csv(url))
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {url}: {e}")
    if not dfs:
        raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
    return pd.concat(dfs, ignore_index=True)

# –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫
def semantic_search(query, df, top_k=5, threshold=0.5):
    model = get_model()
    query_proc = preprocess(query)
    query_emb = model.encode(query_proc, convert_to_tensor=True)
    phrase_embs = model.encode(df['phrase_proc'].tolist(), convert_to_tensor=True)

    sims = util.pytorch_cos_sim(query_emb, phrase_embs)[0]
    results = [
        (float(score), df.iloc[idx]['phrase_full'], df.iloc[idx]['topics'])
        for idx, score in enumerate(sims) if float(score) >= threshold
    ]
    return sorted(results, key=lambda x: x[0], reverse=True)[:top_k]

# ‚úÖ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
def keyword_search(query, df):
    query_proc = preprocess(query)
    query_words = re.findall(r"\w+", query_proc)
    query_lemmas = set(map(lemmatize_cached, query_words))  # üî• –ë—ã—Å—Ç—Ä–µ–µ, —á–µ–º list

    matched = []
    for row in df.itertuples():
        phrase_lemmas = row.phrase_lemmas

        if all(
            any(ql in SYNONYM_DICT.get(pl, {pl}) for pl in phrase_lemmas)
            for ql in query_lemmas
        ):
            matched.append((row.phrase, row.topics))
    return matched
