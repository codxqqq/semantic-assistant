import streamlit as st
from utils import load_all_excels, semantic_search, keyword_search, filter_by_topics

st.set_page_config(page_title="Semantic Assistant", layout="centered")
st.title("ü§ñ Semantic Assistant")

@st.cache_data
def get_data():
    return load_all_excels()

df = get_data()

# üîò –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–º–∞—Ç–∏–∫–∏ –∏–∑ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–∞
all_topics = sorted({topic for topics in df['topics'] for topic in topics})

# üìç –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–µ–º (–º—É–ª—å—Ç–∏—Å–µ–ª–µ–∫—Ç)
selected_topics = st.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):", all_topics)

query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")

if query:
    try:
        # üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫
        results = semantic_search(query, df)
        filtered_results = filter_by_topics(results, selected_topics)

        if filtered_results:
            st.markdown("### üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
            for score, phrase_full, topics in filtered_results:
                st.markdown(f"- **{phrase_full}** ‚Üí {', '.join(topics)} (_{score:.2f}_)")
        else:
            st.warning("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —É–º–Ω–æ–º –ø–æ–∏—Å–∫–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏.")

        # üß∑ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫
        exact_results = keyword_search(query, df)
        filtered_exact = filter_by_topics(exact_results, selected_topics)

        if filtered_exact:
            st.markdown("### üß∑ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫:")
            for phrase, topics in filtered_exact:
                st.markdown(f"- **{phrase}** ‚Üí {', '.join(topics)}")
        else:
            st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–º–∞–º–∏.")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
