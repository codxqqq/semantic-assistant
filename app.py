import streamlit as st
from utils import load_all_excels, semantic_search, keyword_search

st.set_page_config(page_title="Semantic Assistant", layout="centered")
st.title("ü§ñ Semantic Assistant")

# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
@st.cache_data
def get_data():
    return load_all_excels()

df = get_data()

# üîé –§–ò–õ–¨–¢–† –ü–û –¢–ï–ú–ê–¢–ò–ö–ê–ú (–ù–ï–ó–ê–í–ò–°–ò–ú–´–ô)
all_topics = sorted({t for topics in df['topics'] for t in topics})
selected_topics = st.multiselect("–§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º:", all_topics)

if selected_topics:
    st.markdown("### üóÇÔ∏è –§—Ä–∞–∑—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–µ–º–∞—Ç–∏–∫–∞–º:")
    for _, row in df.iterrows():
        phrase = row["phrase_full"]
        topics = row["topics"]
        if any(t in selected_topics for t in topics):
            st.markdown(f"- **{phrase}** ‚Üí {', '.join(topics)}")

# üîç –ü–û–ò–°–ö –ü–û –ó–ê–ü–†–û–°–£ (–ù–ï –ó–ê–í–ò–°–ò–¢ –û–¢ –§–ò–õ–¨–¢–†–ê)
query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")

if query:
    try:
        results = semantic_search(query, df)
        if results:
            st.markdown("### ü§ñ –£–º–Ω—ã–π –ø–æ–∏—Å–∫:")
            for score, phrase_full, topics in results:
                st.markdown(f"- **{phrase_full}** ‚Üí {', '.join(topics)} (_{score:.2f}_)")
        else:
            st.warning("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —É–º–Ω–æ–º –ø–æ–∏—Å–∫–µ.")

        exact_results = keyword_search(query, df)
        if exact_results:
            st.markdown("### üß∑ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫:")
            for phrase, topics in exact_results:
                st.markdown(f"- **{phrase}** ‚Üí {', '.join(topics)}")
        else:
            st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ.")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
