import streamlit as st
from utils import load_all_excels, semantic_search, keyword_search

st.set_page_config(page_title="Semantic Assistant", layout="centered")
st.title("ü§ñ Semantic Assistant")

# üìç –ë–ª–æ–∫ 1. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º
all_topics = sorted({topic for topics in df['topics'] for topic in topics})
selected_topics = st.multiselect("üìÇ –ü–æ–∫–∞–∑–∞—Ç—å —Ñ—Ä–∞–∑—ã –ø–æ —Ç–µ–º–∞—Ç–∏–∫–∞–º:", all_topics)

if selected_topics:
    filtered_df = df[df['topics'].apply(lambda topics: any(t in topics for t in selected_topics))]
    st.markdown("### üìã –§—Ä–∞–∑—ã —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç–µ–º–∞—Ç–∏–∫–∞–º–∏:")
    for row in filtered_df.itertuples():
        st.markdown(f"- **{row.phrase_full}** ‚Üí {', '.join(row.topics)}")

st.divider()

query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å:")

if query:
    try:
        df = load_all_excels()
        results = semantic_search(query, df)

        if results:
            st.markdown("### üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–º–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
            for score, phrase_full, topics in results:
                st.markdown(f"- **{phrase_full}** ‚Üí {', '.join(topics)} (_{score:.2f}_)")
        else:
            st.warning("–°–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —É–º–Ω–æ–º –ø–æ–∏—Å–∫–µ.")

        # –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–Ω–∏–∑—É
        exact_results = keyword_search(query, df)
        if exact_results:
            st.markdown("### üß∑ –¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫:")
            for phrase, topics in exact_results:
                st.markdown(f"- **{phrase}** ‚Üí {', '.join(topics)}")
        else:
            st.info("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ç–æ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ.")

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
